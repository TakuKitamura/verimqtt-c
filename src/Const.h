/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: krml -verbose -warn-error +9 -drop WasmSupport -drop C_Endianness -drop C -tmpdir ../out -fsopt --cache_dir -fsopt ../out -no-prefix Main -no-prefix Utils -no-prefix Const -no-prefix Common -no-prefix Publish -no-prefix Connect -no-prefix Disconnect -no-prefix FFI -no-prefix Debug -no-prefix Debug_FFI -o ../mqttPacketParser.out main.fst common.fst const.fst publish.fst connect.fst disconnect.fst ffi.fst debug.fst debug_ffi.fst ffi.c debug_ffi.c callMain.c
  F* version: ad3db6d3
  KreMLin version: 2f843633
 */

#include "kremlib.h"
#ifndef __Const_H
#define __Const_H




extern uint8_t max_u8;

extern uint16_t max_u16;

extern uint32_t max_u32;

extern uint32_t min_packet_size;

extern uint32_t max_packet_size;

extern uint32_t max_request_size;

extern uint32_t min_request_size;

extern uint32_t max_payload_size;

typedef uint32_t range_zero_to_max_u8_u32;

typedef uint32_t type_packet_size;

typedef uint32_t type_packet_data_index;

typedef uint8_t type_mqtt_control_packets;

extern uint8_t define_mqtt_control_packet_CONNECT;

extern uint8_t define_mqtt_control_packet_CONNACK;

extern uint8_t define_mqtt_control_packet_PUBLISH;

extern uint8_t define_mqtt_control_packet_PUBACK;

extern uint8_t define_mqtt_control_packet_PUBREC;

extern uint8_t define_mqtt_control_packet_PUBREL;

extern uint8_t define_mqtt_control_packet_PUBCOMP;

extern uint8_t define_mqtt_control_packet_SUBSCRIBE;

extern uint8_t define_mqtt_control_packet_SUBACK;

extern uint8_t define_mqtt_control_packet_UNSUBSCRIBE;

extern uint8_t define_mqtt_control_packet_UNSUBACK;

extern uint8_t define_mqtt_control_packet_PINGREQ;

extern uint8_t define_mqtt_control_packet_PINGRESP;

extern uint8_t define_mqtt_control_packet_DISCONNECT;

extern uint8_t define_mqtt_control_packet_AUTH;

typedef C_String_t type_mqtt_control_packet_label;

extern C_String_t define_mqtt_control_packet_CONNECT_label;

extern C_String_t define_mqtt_control_packet_CONNACK_label;

extern C_String_t define_mqtt_control_packet_PUBLISH_label;

extern C_String_t define_mqtt_control_packet_PUBACK_label;

extern C_String_t define_mqtt_control_packet_PUBREC_label;

extern C_String_t define_mqtt_control_packet_PUBREL_label;

extern C_String_t define_mqtt_control_packet_PUBCOMP_label;

extern C_String_t define_mqtt_control_packet_SUBSCRIBE_label;

extern C_String_t define_mqtt_control_packet_SUBACK_label;

extern C_String_t define_mqtt_control_packet_UNSUBSCRIBE_label;

extern C_String_t define_mqtt_control_packet_UNSUBACK_label;

extern C_String_t define_mqtt_control_packet_PINGREQ_label;

extern C_String_t define_mqtt_control_packet_PINGRESP_label;

extern C_String_t define_mqtt_control_packet_DISCONNECT_label;

extern C_String_t define_mqtt_control_packet_AUTH_label;

typedef C_String_t type_message_name_restrict;

typedef uint8_t type_mqtt_control_packets_restrict;

typedef uint32_t type_remaining_length;

typedef uint8_t type_flag_restrict;

typedef uint8_t type_dup_flags;

extern uint8_t define_dup_flag_first_delivery;

extern uint8_t define_dup_flag_re_delivery;

typedef uint8_t type_qos_flags;

extern uint8_t define_qos_flag_at_most_once_delivery;

extern uint8_t define_qos_flag_at_least_once_delivery;

extern uint8_t define_qos_flag_exactly_once_delivery;

typedef uint8_t type_retain_flags;

extern uint8_t define_retain_flag_must_not_store_application_message;

extern uint8_t define_retain_flag_must_store_application_message;

typedef uint8_t type_dup_flags_restrict;

typedef uint8_t type_qos_flags_restrict;

typedef uint8_t type_retain_flags_restrict;

typedef uint8_t type_flags;

extern uint8_t define_flag_CONNECT;

extern uint8_t define_flag_CONNACK;

extern uint8_t define_flag_PUBACK;

extern uint8_t define_flag_PUBREC;

extern uint8_t define_flag_PUBREL;

extern uint8_t define_flag_PUBCOMP;

extern uint8_t define_flag_SUBSCRIBE;

extern uint8_t define_flag_SUBACK;

extern uint8_t define_flag_UNSUBSCRIBE;

extern uint8_t define_flag_UNSUBACK;

extern uint8_t define_flag_PINGREQ;

extern uint8_t define_flag_PINGRESP;

extern uint8_t define_flag_DISCONNECT;

extern uint8_t define_flag_AUTH;

typedef struct struct_flags_s
{
  uint8_t flag;
  uint8_t dup_flag;
  uint8_t qos_flag;
  uint8_t retain_flag;
}
struct_flags;

uint8_t __proj__Mkstruct_flags__item__flag(struct_flags projectee);

uint8_t __proj__Mkstruct_flags__item__dup_flag(struct_flags projectee);

uint8_t __proj__Mkstruct_flags__item__qos_flag(struct_flags projectee);

uint8_t __proj__Mkstruct_flags__item__retain_flag(struct_flags projectee);

typedef struct struct_fixed_header_constant_s
{
  uint8_t message_type_constant;
  C_String_t message_name_constant;
  struct_flags flags_constant;
}
struct_fixed_header_constant;

uint8_t
__proj__Mkstruct_fixed_header_constant__item__message_type_constant(
  struct_fixed_header_constant projectee
);

C_String_t
__proj__Mkstruct_fixed_header_constant__item__message_name_constant(
  struct_fixed_header_constant projectee
);

struct_flags
__proj__Mkstruct_fixed_header_constant__item__flags_constant(
  struct_fixed_header_constant projectee
);

typedef struct struct_connect_flags_s
{
  uint8_t connect_flag;
  uint8_t user_name;
  uint8_t password;
  uint8_t will_retain;
  uint8_t will_qos;
  uint8_t will_flag;
  uint8_t clean_start;
}
struct_connect_flags;

uint8_t __proj__Mkstruct_connect_flags__item__connect_flag(struct_connect_flags projectee);

uint8_t __proj__Mkstruct_connect_flags__item__user_name(struct_connect_flags projectee);

uint8_t __proj__Mkstruct_connect_flags__item__password(struct_connect_flags projectee);

uint8_t __proj__Mkstruct_connect_flags__item__will_retain(struct_connect_flags projectee);

uint8_t __proj__Mkstruct_connect_flags__item__will_qos(struct_connect_flags projectee);

uint8_t __proj__Mkstruct_connect_flags__item__will_flag(struct_connect_flags projectee);

uint8_t __proj__Mkstruct_connect_flags__item__clean_start(struct_connect_flags projectee);

typedef struct struct_connect_property_s
{
  uint8_t connect_property_id;
  C_String_t connect_property_name;
}
struct_connect_property;

uint8_t
__proj__Mkstruct_connect_property__item__connect_property_id(struct_connect_property projectee);

C_String_t
__proj__Mkstruct_connect_property__item__connect_property_name(
  struct_connect_property projectee
);

extern uint8_t define_connect_property_session_expiry_interval_id;

extern uint8_t define_connect_property_receive_maximum_id;

extern uint8_t define_connect_property_maximum_packet_size_id;

extern uint8_t define_connect_property_topic_alias_maximum_id;

extern uint8_t define_connect_property_request_response_information_id;

extern uint8_t define_connect_property_request_problem_information_id;

extern uint8_t define_connect_property_user_property_id;

extern uint8_t define_connect_property_authentication_method_id;

extern uint8_t define_connect_property_authentication_data_id;

extern struct_connect_property define_struct_connect_property_session_expiry_interval;

extern struct_connect_property define_struct_connect_property_receive_maximum;

extern struct_connect_property define_struct_connect_property_maximum_packet_size;

extern struct_connect_property define_struct_connect_property_topic_alias_maximum;

extern struct_connect_property define_struct_connect_property_request_response_information;

extern struct_connect_property define_struct_connect_property_request_problem_information;

extern struct_connect_property define_struct_connect_property_user_property;

extern struct_connect_property define_struct_connect_property_authentication_method;

extern struct_connect_property define_struct_connect_property_authentication_data;

typedef struct struct_utf8_string_s
{
  uint16_t utf8_string_length;
  uint8_t *utf8_string_value;
  uint8_t utf8_string_status_code;
  uint32_t utf8_next_start_index;
}
struct_utf8_string;

uint16_t __proj__Mkstruct_utf8_string__item__utf8_string_length(struct_utf8_string projectee);

uint8_t *__proj__Mkstruct_utf8_string__item__utf8_string_value(struct_utf8_string projectee);

uint8_t
__proj__Mkstruct_utf8_string__item__utf8_string_status_code(struct_utf8_string projectee);

uint32_t
__proj__Mkstruct_utf8_string__item__utf8_next_start_index(struct_utf8_string projectee);

typedef C_String_t type_topic_name_restrict;

typedef uint32_t type_topic_length_restrict;

typedef uint32_t type_property_length;

typedef C_String_t type_payload_restrict;

typedef uint32_t type_payload_offset;

typedef uint8_t type_disconnect_reason_code;

extern uint8_t define_disconnect_reason_code_normal_disconnection;

extern uint8_t define_disconnect_reason_code_disconnect_with_will_message;

extern uint8_t define_disconnect_reason_code_unspecified_error;

extern uint8_t define_disconnect_reason_code_malformed_packet;

extern uint8_t define_disconnect_reason_code_protocol_error;

extern uint8_t define_disconnect_reason_code_implementation_specific_error;

extern uint8_t define_disconnect_reason_code_not_authorized;

extern uint8_t define_disconnect_reason_code_server_busy;

extern uint8_t define_disconnect_reason_code_server_shutting_down;

extern uint8_t define_disconnect_reason_code_keep_alive_timeout;

extern uint8_t define_disconnect_reason_code_session_taken_over;

extern uint8_t define_disconnect_reason_code_topic_filter_invalid;

extern uint8_t define_disconnect_reason_code_topic_name_invalid;

extern uint8_t define_disconnect_reason_receive_maximum_exceeded;

extern uint8_t define_disconnect_reason_topic_alias_invalid;

extern uint8_t define_disconnect_reason_packet_too_large;

extern uint8_t define_disconnect_reason_message_rate_too_high;

extern uint8_t define_disconnect_reason_quota_exceeded;

extern uint8_t define_disconnect_reason_administrative_action;

extern uint8_t define_disconnect_reason_payload_format_invalid;

extern uint8_t define_disconnect_reason_retain_not_supported;

extern uint8_t define_disconnect_reason_qos_not_supported;

extern uint8_t define_disconnect_reason_use_another_server;

extern uint8_t define_disconnect_reason_server_moved;

extern uint8_t define_disconnect_reason_shared_subscriptions_not_supported;

extern uint8_t define_disconnect_reason_connection_rate_exceeded;

extern uint8_t define_disconnect_reason_maximum_connect_time;

extern uint8_t define_disconnect_reason_subscription_identifiers_not_supported;

extern uint8_t define_disconnect_reason_wildcard_subscriptions_not_supported;

typedef C_String_t type_disconnect_reason_code_name;

extern C_String_t define_disconnect_reason_code_normal_disconnection_name;

extern C_String_t define_disconnect_reason_code_disconnect_with_will_message_name;

extern C_String_t define_disconnect_reason_code_unspecified_error_name;

extern C_String_t define_disconnect_reason_code_malformed_packet_name;

extern C_String_t define_disconnect_reason_code_protocol_error_name;

extern C_String_t define_disconnect_reason_code_implementation_specific_error_name;

extern C_String_t define_disconnect_reason_code_not_authorized_name;

extern C_String_t define_disconnect_reason_code_server_busy_name;

extern C_String_t define_disconnect_reason_code_server_shutting_down_name;

extern C_String_t define_disconnect_reason_code_keep_alive_timeout_name;

extern C_String_t define_disconnect_reason_code_session_taken_over_name;

extern C_String_t define_disconnect_reason_code_topic_filter_invalid_name;

extern C_String_t define_disconnect_reason_code_topic_name_invalid_name;

extern C_String_t define_disconnect_reason_receive_maximum_exceeded_name;

extern C_String_t define_disconnect_reason_topic_alias_invalid_name;

extern C_String_t define_disconnect_reason_packet_too_large_name;

extern C_String_t define_disconnect_reason_message_rate_too_high_name;

extern C_String_t define_disconnect_reason_quota_exceeded_name;

extern C_String_t define_disconnect_reason_administrative_action_name;

extern C_String_t define_disconnect_reason_payload_format_invalid_name;

extern C_String_t define_disconnect_reason_retain_not_supported_name;

extern C_String_t define_disconnect_reason_qos_not_supported_name;

extern C_String_t define_disconnect_reason_use_another_server_name;

extern C_String_t define_disconnect_reason_server_moved_name;

extern C_String_t define_disconnect_reason_shared_subscriptions_not_supported_name;

extern C_String_t define_disconnect_reason_connection_rate_exceeded_name;

extern C_String_t define_disconnect_reason_maximum_connect_time_name;

extern C_String_t define_disconnect_reason_subscription_identifiers_not_supported_name;

extern C_String_t define_disconnect_reason_wildcard_subscriptions_not_supported_name;

typedef struct struct_disconnect_reason_s
{
  uint8_t disconnect_reason_code;
  C_String_t disconnect_reason_code_name;
}
struct_disconnect_reason;

uint8_t
__proj__Mkstruct_disconnect_reason__item__disconnect_reason_code(
  struct_disconnect_reason projectee
);

C_String_t
__proj__Mkstruct_disconnect_reason__item__disconnect_reason_code_name(
  struct_disconnect_reason projectee
);

extern struct_disconnect_reason define_struct_disconnect_normal_disconnection;

extern struct_disconnect_reason define_struct_disconnect_disconnect_with_will_message;

extern struct_disconnect_reason define_struct_disconnect_unspecified_error;

extern struct_disconnect_reason define_struct_disconnect_malformed_packet;

extern struct_disconnect_reason define_struct_disconnect_protocol_error;

extern struct_disconnect_reason define_struct_disconnect_implementation_specific_error;

extern struct_disconnect_reason define_struct_disconnect_not_authorized;

extern struct_disconnect_reason define_struct_disconnect_server_busy;

extern struct_disconnect_reason define_struct_disconnect_server_shutting_down;

extern struct_disconnect_reason define_struct_disconnect_keep_alive_timeout;

extern struct_disconnect_reason define_struct_disconnect_session_taken_over;

extern struct_disconnect_reason define_struct_disconnect_topic_filter_invalid;

extern struct_disconnect_reason define_struct_disconnect_topic_name_invalid;

extern struct_disconnect_reason define_struct_disconnect_receive_maximum_exceeded;

extern struct_disconnect_reason define_struct_disconnect_topic_alias_invalid;

extern struct_disconnect_reason define_struct_disconnect_packet_too_large;

extern struct_disconnect_reason define_struct_disconnect_message_rate_too_high;

extern struct_disconnect_reason define_struct_disconnect_quota_exceeded;

extern struct_disconnect_reason define_struct_disconnect_administrative_action;

extern struct_disconnect_reason define_struct_disconnect_payload_format_invalid;

extern struct_disconnect_reason define_struct_disconnect_retain_not_supported;

extern struct_disconnect_reason define_struct_disconnect_qos_not_supported;

extern struct_disconnect_reason define_struct_disconnect_use_another_server;

extern struct_disconnect_reason define_struct_disconnect_server_moved;

extern struct_disconnect_reason define_struct_disconnect_shared_subscriptions_not_supported;

extern struct_disconnect_reason define_struct_disconnect_connection_rate_exceeded;

extern struct_disconnect_reason define_struct_disconnect_maximum_connect_time;

extern struct_disconnect_reason
define_struct_disconnect_subscription_identifiers_not_supported;

extern struct_disconnect_reason define_struct_disconnect_wildcard_subscriptions_not_supported;

extern struct_disconnect_reason define_struct_disconnect_error;

typedef uint8_t type_error_code;

extern uint8_t define_no_error_code;

extern uint8_t define_error_remaining_length_invalid_code;

extern uint8_t define_error_message_type_invalid_code;

extern uint8_t define_error_flag_invalid_code;

extern uint8_t define_error_dup_flag_invalid_code;

extern uint8_t define_error_qos_flag_invalid_code;

extern uint8_t define_error_retain_flag_invalid_code;

extern uint8_t define_error_topic_length_invalid_code;

extern uint8_t define_error_topic_name_dont_zero_terminated_code;

extern uint8_t define_error_property_length_invalid_code;

extern uint8_t define_error_payload_invalid_code;

extern uint8_t define_error_topic_name_have_inavlid_character_code;

extern uint8_t define_error_protocol_name_invalid_code;

extern uint8_t define_error_protocol_version_invalid_code;

extern uint8_t define_error_connect_flag_invalid_code;

extern uint8_t define_error_property_error_code;

extern uint8_t define_error_connect_id_invalid_code;

extern uint8_t define_error_disconnect_reason_invalid_code;

extern uint8_t define_error_connect_invalid_keep_alive_code;

typedef uint8_t type_error_code_restrict;

typedef C_String_t type_error_message;

extern C_String_t define_error_remaining_length_invalid;

extern C_String_t define_error_message_type_invalid;

extern C_String_t define_error_flag_invalid;

extern C_String_t define_error_dup_flag_invalid;

extern C_String_t define_error_qos_flag_invalid;

extern C_String_t define_error_retain_flag_invalid;

extern C_String_t define_error_topic_length_invalid;

extern C_String_t define_error_topic_name_dont_zero_terminated;

extern C_String_t define_error_topic_name_have_inavlid_character;

extern C_String_t define_error_property_length_invalid;

extern C_String_t define_error_payload_invalid;

extern C_String_t define_error_protocol_name_invalid;

extern C_String_t define_error_protocol_version_invalid;

extern C_String_t define_error_connect_flag_invalid;

extern C_String_t define_error_property_invalid;

extern C_String_t define_error_connect_id_invalid;

extern C_String_t define_error_disconnect_reason_invalid;

extern C_String_t define_error_connect_keep_alive_invalid;

extern C_String_t define_no_error;

typedef C_String_t type_error_message_restrict;

typedef struct struct_error_struct_s
{
  uint8_t code;
  C_String_t message;
}
struct_error_struct;

uint8_t __proj__Mkstruct_error_struct__item__code(struct_error_struct projectee);

C_String_t __proj__Mkstruct_error_struct__item__message(struct_error_struct projectee);

typedef struct struct_utf8_string_pair_s
{
  struct_utf8_string utf8_string_pair_key;
  struct_utf8_string utf8_string_pair_value;
}
struct_utf8_string_pair;

struct_utf8_string
__proj__Mkstruct_utf8_string_pair__item__utf8_string_pair_key(
  struct_utf8_string_pair projectee
);

struct_utf8_string
__proj__Mkstruct_utf8_string_pair__item__utf8_string_pair_value(
  struct_utf8_string_pair projectee
);

typedef struct struct_binary_data_s
{
  bool is_valid_binary_data;
  uint16_t binary_length;
  uint8_t *binary_value;
  uint32_t binary_next_start_index;
}
struct_binary_data;

bool __proj__Mkstruct_binary_data__item__is_valid_binary_data(struct_binary_data projectee);

uint16_t __proj__Mkstruct_binary_data__item__binary_length(struct_binary_data projectee);

uint8_t *__proj__Mkstruct_binary_data__item__binary_value(struct_binary_data projectee);

uint32_t
__proj__Mkstruct_binary_data__item__binary_next_start_index(struct_binary_data projectee);

typedef uint8_t struct_one_byte_integer;

uint8_t __proj__Mkstruct_one_byte_integer__item__one_byte_integer_value(uint8_t projectee);

typedef uint16_t struct_two_byte_integer;

uint16_t __proj__Mkstruct_two_byte_integer__item__two_byte_integer_value(uint16_t projectee);

typedef uint32_t struct_four_byte_integer;

uint32_t __proj__Mkstruct_four_byte_integer__item__four_byte_integer_value(uint32_t projectee);

typedef uint32_t struct_variable_byte_integer;

uint32_t
__proj__Mkstruct_variable_byte_integer__item__variable_byte_integer_value(uint32_t projectee);

typedef uint8_t type_property_error_code;

typedef C_String_t type_property_error_code_name;

typedef struct struct_property_error_s
{
  uint8_t property_error_code;
  C_String_t property_error_code_name;
}
struct_property_error;

uint8_t
__proj__Mkstruct_property_error__item__property_error_code(struct_property_error projectee);

C_String_t
__proj__Mkstruct_property_error__item__property_error_code_name(
  struct_property_error projectee
);

extern uint8_t property_no_error_code;

extern uint8_t property_utf8_encoded_string_error_code;

extern uint8_t property_variable_integer_error_code;

extern uint8_t property_binary_data_error_code;

extern uint8_t property_utf8_encoded_string_pair_error_code;

extern uint8_t property_type_id_error_code;

extern struct_property_error define_struct_property_no_error;

extern struct_property_error define_struct_property_utf8_encoded_string_error;

extern struct_property_error define_struct_property_variable_integer_error;

extern struct_property_error define_struct_property_binary_data_error;

extern struct_property_error define_struct_property_utf8_encoded_string_pair_error;

extern struct_property_error define_struct_property_id_error;

typedef struct struct_property_type_s
{
  uint8_t one_byte_integer_struct;
  uint16_t two_byte_integer_struct;
  uint32_t four_byte_integer_struct;
  struct_utf8_string utf8_encoded_string_struct;
  uint32_t variable_byte_integer_struct;
  struct_binary_data binary_data_struct;
  struct_utf8_string_pair utf8_string_pair_struct;
  struct_property_error property_type_error;
}
struct_property_type;

uint8_t
__proj__Mkstruct_property_type__item__one_byte_integer_struct(struct_property_type projectee);

uint16_t
__proj__Mkstruct_property_type__item__two_byte_integer_struct(struct_property_type projectee);

uint32_t
__proj__Mkstruct_property_type__item__four_byte_integer_struct(struct_property_type projectee);

struct_utf8_string
__proj__Mkstruct_property_type__item__utf8_encoded_string_struct(
  struct_property_type projectee
);

uint32_t
__proj__Mkstruct_property_type__item__variable_byte_integer_struct(
  struct_property_type projectee
);

struct_binary_data
__proj__Mkstruct_property_type__item__binary_data_struct(struct_property_type projectee);

struct_utf8_string_pair
__proj__Mkstruct_property_type__item__utf8_string_pair_struct(struct_property_type projectee);

struct_property_error
__proj__Mkstruct_property_type__item__property_type_error(struct_property_type projectee);

typedef struct struct_property_s
{
  uint8_t property_id;
  uint8_t property_type_id;
  struct_property_type property_type_struct;
  uint32_t payload_start_index;
}
struct_property;

uint8_t __proj__Mkstruct_property__item__property_id(struct_property projectee);

uint8_t __proj__Mkstruct_property__item__property_type_id(struct_property projectee);

struct_property_type
__proj__Mkstruct_property__item__property_type_struct(struct_property projectee);

uint32_t __proj__Mkstruct_property__item__payload_start_index(struct_property projectee);

typedef struct struct_payload_s
{
  bool is_valid_payload;
  uint8_t *payload_value;
  uint32_t payload_length;
}
struct_payload;

bool __proj__Mkstruct_payload__item__is_valid_payload(struct_payload projectee);

uint8_t *__proj__Mkstruct_payload__item__payload_value(struct_payload projectee);

uint32_t __proj__Mkstruct_payload__item__payload_length(struct_payload projectee);

typedef struct struct_variable_header_publish_s
{
  uint32_t topic_length;
  C_String_t topic_name;
  uint16_t packet_identifier;
  struct_payload payload;
}
struct_variable_header_publish;

uint32_t
__proj__Mkstruct_variable_header_publish__item__topic_length(
  struct_variable_header_publish projectee
);

C_String_t
__proj__Mkstruct_variable_header_publish__item__topic_name(
  struct_variable_header_publish projectee
);

uint16_t
__proj__Mkstruct_variable_header_publish__item__packet_identifier(
  struct_variable_header_publish projectee
);

struct_payload
__proj__Mkstruct_variable_header_publish__item__payload(
  struct_variable_header_publish projectee
);

typedef struct struct_array_u16_s
{
  uint16_t *array_u16;
  uint32_t array_length_u16;
}
struct_array_u16;

uint16_t *__proj__Mkstruct_array_u16__item__array_u16(struct_array_u16 projectee);

uint32_t __proj__Mkstruct_array_u16__item__array_length_u16(struct_array_u16 projectee);

extern struct_property_type property_struct_type_base;

extern struct_property_type no_property_struct_type_base;

extern struct_property property_struct_base;

typedef struct_disconnect_reason struct_disconnect;

struct_disconnect_reason
__proj__Mkstruct_disconnect__item__disconnect_reason(struct_disconnect_reason projectee);

typedef struct struct_publish_parts_s
{
  uint32_t publish_remaining_length;
  uint8_t publish_flag;
  uint8_t publish_dup_flag;
  uint8_t publish_qos_flag;
  uint8_t publish_retain_flag;
  C_String_t publish_topic_name;
  uint32_t publish_topic_length;
  uint16_t publish_packet_identifier;
  struct_payload publish_payload;
  struct_property publish_property;
}
struct_publish_parts;

uint32_t
__proj__Mkstruct_publish_parts__item__publish_remaining_length(struct_publish_parts projectee);

uint8_t __proj__Mkstruct_publish_parts__item__publish_flag(struct_publish_parts projectee);

uint8_t __proj__Mkstruct_publish_parts__item__publish_dup_flag(struct_publish_parts projectee);

uint8_t __proj__Mkstruct_publish_parts__item__publish_qos_flag(struct_publish_parts projectee);

uint8_t
__proj__Mkstruct_publish_parts__item__publish_retain_flag(struct_publish_parts projectee);

C_String_t
__proj__Mkstruct_publish_parts__item__publish_topic_name(struct_publish_parts projectee);

uint32_t
__proj__Mkstruct_publish_parts__item__publish_topic_length(struct_publish_parts projectee);

uint16_t
__proj__Mkstruct_publish_parts__item__publish_packet_identifier(struct_publish_parts projectee);

struct_payload
__proj__Mkstruct_publish_parts__item__publish_payload(struct_publish_parts projectee);

struct_property
__proj__Mkstruct_publish_parts__item__publish_property(struct_publish_parts projectee);

typedef struct struct_connect_will_s
{
  struct_property connect_will_property;
  struct_utf8_string connect_will_topic_name;
  struct_binary_data connect_will_payload;
  uint32_t user_name_or_password_next_start_index;
}
struct_connect_will;

struct_property
__proj__Mkstruct_connect_will__item__connect_will_property(struct_connect_will projectee);

struct_utf8_string
__proj__Mkstruct_connect_will__item__connect_will_topic_name(struct_connect_will projectee);

struct_binary_data
__proj__Mkstruct_connect_will__item__connect_will_payload(struct_connect_will projectee);

uint32_t
__proj__Mkstruct_connect_will__item__user_name_or_password_next_start_index(
  struct_connect_will projectee
);

typedef struct struct_connect_s
{
  C_String_t protocol_name;
  uint8_t protocol_version;
  struct_connect_flags flags;
  uint16_t keep_alive;
  struct_utf8_string connect_id;
  struct_connect_will will;
  struct_utf8_string user_name;
  struct_binary_data password;
}
struct_connect;

C_String_t __proj__Mkstruct_connect__item__protocol_name(struct_connect projectee);

uint8_t __proj__Mkstruct_connect__item__protocol_version(struct_connect projectee);

struct_connect_flags __proj__Mkstruct_connect__item__flags(struct_connect projectee);

uint16_t __proj__Mkstruct_connect__item__keep_alive(struct_connect projectee);

struct_utf8_string __proj__Mkstruct_connect__item__connect_id(struct_connect projectee);

struct_connect_will __proj__Mkstruct_connect__item__will(struct_connect projectee);

struct_utf8_string __proj__Mkstruct_connect__item__user_name(struct_connect projectee);

struct_binary_data __proj__Mkstruct_connect__item__password(struct_connect projectee);

typedef struct struct_fixed_header_s
{
  uint8_t message_type;
  C_String_t message_name;
  struct_flags flags;
  uint32_t remaining_length;
  struct_connect connect;
  struct_variable_header_publish publish;
  struct_disconnect_reason disconnect;
  struct_property property;
  struct_error_struct error;
}
struct_fixed_header;

uint8_t __proj__Mkstruct_fixed_header__item__message_type(struct_fixed_header projectee);

C_String_t __proj__Mkstruct_fixed_header__item__message_name(struct_fixed_header projectee);

struct_flags __proj__Mkstruct_fixed_header__item__flags(struct_fixed_header projectee);

uint32_t __proj__Mkstruct_fixed_header__item__remaining_length(struct_fixed_header projectee);

struct_connect __proj__Mkstruct_fixed_header__item__connect(struct_fixed_header projectee);

struct_variable_header_publish
__proj__Mkstruct_fixed_header__item__publish(struct_fixed_header projectee);

struct_disconnect_reason
__proj__Mkstruct_fixed_header__item__disconnect(struct_fixed_header projectee);

struct_property __proj__Mkstruct_fixed_header__item__property(struct_fixed_header projectee);

struct_error_struct __proj__Mkstruct_fixed_header__item__error(struct_fixed_header projectee);

typedef struct struct_connect_parts_s
{
  uint32_t connect_remaining_length;
  struct_fixed_header_constant connect_connect_constant;
  struct_connect connect_struct;
  struct_property connect_property;
}
struct_connect_parts;

uint32_t
__proj__Mkstruct_connect_parts__item__connect_remaining_length(struct_connect_parts projectee);

struct_fixed_header_constant
__proj__Mkstruct_connect_parts__item__connect_connect_constant(struct_connect_parts projectee);

struct_connect
__proj__Mkstruct_connect_parts__item__connect_struct(struct_connect_parts projectee);

struct_property
__proj__Mkstruct_connect_parts__item__connect_property(struct_connect_parts projectee);

typedef struct struct_disconnect_parts_s
{
  uint32_t disconnect_remaining_length;
  struct_fixed_header_constant disconnect_disconnect_constant;
  struct_disconnect_reason disconnect_struct;
  struct_property property;
}
struct_disconnect_parts;

uint32_t
__proj__Mkstruct_disconnect_parts__item__disconnect_remaining_length(
  struct_disconnect_parts projectee
);

struct_fixed_header_constant
__proj__Mkstruct_disconnect_parts__item__disconnect_disconnect_constant(
  struct_disconnect_parts projectee
);

struct_disconnect_reason
__proj__Mkstruct_disconnect_parts__item__disconnect_struct(struct_disconnect_parts projectee);

struct_property
__proj__Mkstruct_disconnect_parts__item__property(struct_disconnect_parts projectee);

typedef struct struct_variable_length_s
{
  bool have_error;
  uint32_t variable_length_value;
  uint32_t next_start_index;
}
struct_variable_length;

bool __proj__Mkstruct_variable_length__item__have_error(struct_variable_length projectee);

uint32_t
__proj__Mkstruct_variable_length__item__variable_length_value(struct_variable_length projectee);

uint32_t
__proj__Mkstruct_variable_length__item__next_start_index(struct_variable_length projectee);

typedef struct struct_share_common_data_s
{
  uint8_t *common_packet_data;
  uint32_t common_packet_size;
  uint8_t common_message_type;
  uint8_t common_flag;
  uint32_t common_remaining_length;
  uint32_t common_next_start_index;
}
struct_share_common_data;

uint8_t
*__proj__Mkstruct_share_common_data__item__common_packet_data(
  struct_share_common_data projectee
);

uint32_t
__proj__Mkstruct_share_common_data__item__common_packet_size(
  struct_share_common_data projectee
);

uint8_t
__proj__Mkstruct_share_common_data__item__common_message_type(
  struct_share_common_data projectee
);

uint8_t
__proj__Mkstruct_share_common_data__item__common_flag(struct_share_common_data projectee);

uint32_t
__proj__Mkstruct_share_common_data__item__common_remaining_length(
  struct_share_common_data projectee
);

uint32_t
__proj__Mkstruct_share_common_data__item__common_next_start_index(
  struct_share_common_data projectee
);

typedef struct struct_share_common_data_check_s
{
  bool share_common_data_have_error;
  struct_fixed_header share_common_data_error;
  struct_share_common_data share_common_data;
}
struct_share_common_data_check;

bool
__proj__Mkstruct_share_common_data_check__item__share_common_data_have_error(
  struct_share_common_data_check projectee
);

struct_fixed_header
__proj__Mkstruct_share_common_data_check__item__share_common_data_error(
  struct_share_common_data_check projectee
);

struct_share_common_data
__proj__Mkstruct_share_common_data_check__item__share_common_data(
  struct_share_common_data_check projectee
);

typedef struct struct_publish_packet_seed_s
{
  uint8_t publish_seed_dup_flag;
  uint8_t publish_seed_qos_flag;
  uint8_t publish_seed_retain_flag;
  uint32_t publish_seed_topic_length;
  C_String_t publish_seed_topic_name;
  uint8_t publish_seed_topic_name_error_status;
  uint16_t publish_seed_packet_identifier;
  bool publish_seed_is_searching_property_length;
  struct_payload publish_seed_payload;
  uint8_t publish_seed_payload_error_status;
  struct_property publish_seed_property;
}
struct_publish_packet_seed;

uint8_t
__proj__Mkstruct_publish_packet_seed__item__publish_seed_dup_flag(
  struct_publish_packet_seed projectee
);

uint8_t
__proj__Mkstruct_publish_packet_seed__item__publish_seed_qos_flag(
  struct_publish_packet_seed projectee
);

uint8_t
__proj__Mkstruct_publish_packet_seed__item__publish_seed_retain_flag(
  struct_publish_packet_seed projectee
);

uint32_t
__proj__Mkstruct_publish_packet_seed__item__publish_seed_topic_length(
  struct_publish_packet_seed projectee
);

C_String_t
__proj__Mkstruct_publish_packet_seed__item__publish_seed_topic_name(
  struct_publish_packet_seed projectee
);

uint8_t
__proj__Mkstruct_publish_packet_seed__item__publish_seed_topic_name_error_status(
  struct_publish_packet_seed projectee
);

uint16_t
__proj__Mkstruct_publish_packet_seed__item__publish_seed_packet_identifier(
  struct_publish_packet_seed projectee
);

bool
__proj__Mkstruct_publish_packet_seed__item__publish_seed_is_searching_property_length(
  struct_publish_packet_seed projectee
);

struct_payload
__proj__Mkstruct_publish_packet_seed__item__publish_seed_payload(
  struct_publish_packet_seed projectee
);

uint8_t
__proj__Mkstruct_publish_packet_seed__item__publish_seed_payload_error_status(
  struct_publish_packet_seed projectee
);

struct_property
__proj__Mkstruct_publish_packet_seed__item__publish_seed_property(
  struct_publish_packet_seed projectee
);

typedef struct struct_connect_packet_seed_s
{
  bool connect_seed_is_valid_protocol_name;
  bool connect_seed_is_valid_protocol_version;
  uint8_t connect_seed_connect_flag;
  bool connect_seed_is_valid_keep_alive;
  uint16_t connect_seed_keep_alive;
  bool connect_seed_is_valid_property_length;
  struct_property connect_seed_property;
  struct_utf8_string connect_seed_connect_id;
  struct_connect_will connect_seed_will_struct;
  struct_utf8_string connect_seed_user_name_struct;
  struct_binary_data connect_seed_password_struct;
}
struct_connect_packet_seed;

bool
__proj__Mkstruct_connect_packet_seed__item__connect_seed_is_valid_protocol_name(
  struct_connect_packet_seed projectee
);

bool
__proj__Mkstruct_connect_packet_seed__item__connect_seed_is_valid_protocol_version(
  struct_connect_packet_seed projectee
);

uint8_t
__proj__Mkstruct_connect_packet_seed__item__connect_seed_connect_flag(
  struct_connect_packet_seed projectee
);

bool
__proj__Mkstruct_connect_packet_seed__item__connect_seed_is_valid_keep_alive(
  struct_connect_packet_seed projectee
);

uint16_t
__proj__Mkstruct_connect_packet_seed__item__connect_seed_keep_alive(
  struct_connect_packet_seed projectee
);

bool
__proj__Mkstruct_connect_packet_seed__item__connect_seed_is_valid_property_length(
  struct_connect_packet_seed projectee
);

struct_property
__proj__Mkstruct_connect_packet_seed__item__connect_seed_property(
  struct_connect_packet_seed projectee
);

struct_utf8_string
__proj__Mkstruct_connect_packet_seed__item__connect_seed_connect_id(
  struct_connect_packet_seed projectee
);

struct_connect_will
__proj__Mkstruct_connect_packet_seed__item__connect_seed_will_struct(
  struct_connect_packet_seed projectee
);

struct_utf8_string
__proj__Mkstruct_connect_packet_seed__item__connect_seed_user_name_struct(
  struct_connect_packet_seed projectee
);

struct_binary_data
__proj__Mkstruct_connect_packet_seed__item__connect_seed_password_struct(
  struct_connect_packet_seed projectee
);

typedef struct struct_replace_utf8_encoded_s
{
  uint8_t *replace_bom;
  uint32_t bom_count;
}
struct_replace_utf8_encoded;

uint8_t
*__proj__Mkstruct_replace_utf8_encoded__item__replace_bom(
  struct_replace_utf8_encoded projectee
);

uint32_t
__proj__Mkstruct_replace_utf8_encoded__item__bom_count(struct_replace_utf8_encoded projectee);

typedef struct struct_topic_name_s
{
  uint8_t topic_name_error_status;
  C_String_t topic_name;
}
struct_topic_name;

uint8_t
__proj__Mkstruct_topic_name__item__topic_name_error_status(struct_topic_name projectee);

C_String_t __proj__Mkstruct_topic_name__item__topic_name(struct_topic_name projectee);

typedef struct struct_protocol_name_s
{
  bool is_valid_protocol_name;
  uint32_t protocol_version_start_index;
}
struct_protocol_name;

bool
__proj__Mkstruct_protocol_name__item__is_valid_protocol_name(struct_protocol_name projectee);

uint32_t
__proj__Mkstruct_protocol_name__item__protocol_version_start_index(
  struct_protocol_name projectee
);

typedef struct struct_protocol_version_s
{
  bool is_valid_protocol_version;
  uint32_t connect_flag_start_index;
}
struct_protocol_version;

bool
__proj__Mkstruct_protocol_version__item__is_valid_protocol_version(
  struct_protocol_version projectee
);

uint32_t
__proj__Mkstruct_protocol_version__item__connect_flag_start_index(
  struct_protocol_version projectee
);

typedef struct struct_connect_flag_s
{
  uint8_t connect_flag_value;
  uint32_t keep_alive_start_index;
}
struct_connect_flag;

uint8_t __proj__Mkstruct_connect_flag__item__connect_flag_value(struct_connect_flag projectee);

uint32_t
__proj__Mkstruct_connect_flag__item__keep_alive_start_index(struct_connect_flag projectee);

typedef struct struct_disconnect_packet_seed_s
{
  struct_disconnect_reason disconnect_seed_reason;
  struct_property disconnect_seed_property;
}
struct_disconnect_packet_seed;

struct_disconnect_reason
__proj__Mkstruct_disconnect_packet_seed__item__disconnect_seed_reason(
  struct_disconnect_packet_seed projectee
);

struct_property
__proj__Mkstruct_disconnect_packet_seed__item__disconnect_seed_property(
  struct_disconnect_packet_seed projectee
);

typedef struct struct_packet_identifier_s
{
  uint16_t packet_identifier_value;
  uint32_t property_start_to_offset;
}
struct_packet_identifier;

uint16_t
__proj__Mkstruct_packet_identifier__item__packet_identifier_value(
  struct_packet_identifier projectee
);

uint32_t
__proj__Mkstruct_packet_identifier__item__property_start_to_offset(
  struct_packet_identifier projectee
);

typedef struct struct_keep_alive_s
{
  uint16_t keep_alive_value;
  bool is_valid_keep_alive;
}
struct_keep_alive;

uint16_t __proj__Mkstruct_keep_alive__item__keep_alive_value(struct_keep_alive projectee);

bool __proj__Mkstruct_keep_alive__item__is_valid_keep_alive(struct_keep_alive projectee);

typedef struct struct_is_valid_utf8_ready_s
{
  bool ready_is_malformed_utf8;
  uint8_t ready_codelen;
  uint16_t ready_codepoint;
}
struct_is_valid_utf8_ready;

bool
__proj__Mkstruct_is_valid_utf8_ready__item__ready_is_malformed_utf8(
  struct_is_valid_utf8_ready projectee
);

uint8_t
__proj__Mkstruct_is_valid_utf8_ready__item__ready_codelen(struct_is_valid_utf8_ready projectee);

uint16_t
__proj__Mkstruct_is_valid_utf8_ready__item__ready_codepoint(
  struct_is_valid_utf8_ready projectee
);

typedef struct struct_ready_connect_will_s
{
  struct_connect_will ready_connect_will_struct;
  bool ready_exsist_will;
}
struct_ready_connect_will;

struct_connect_will
__proj__Mkstruct_ready_connect_will__item__ready_connect_will_struct(
  struct_ready_connect_will projectee
);

bool
__proj__Mkstruct_ready_connect_will__item__ready_exsist_will(
  struct_ready_connect_will projectee
);

typedef struct struct_ready_connect_user_name_s
{
  struct_utf8_string ready_connect_user_name_struct;
  bool ready_exsist_user_name;
}
struct_ready_connect_user_name;

struct_utf8_string
__proj__Mkstruct_ready_connect_user_name__item__ready_connect_user_name_struct(
  struct_ready_connect_user_name projectee
);

bool
__proj__Mkstruct_ready_connect_user_name__item__ready_exsist_user_name(
  struct_ready_connect_user_name projectee
);

typedef struct struct_ready_connect_password_s
{
  struct_binary_data ready_connect_password_struct;
  bool ready_exsist_password;
}
struct_ready_connect_password;

struct_binary_data
__proj__Mkstruct_ready_connect_password__item__ready_connect_password_struct(
  struct_ready_connect_password projectee
);

bool
__proj__Mkstruct_ready_connect_password__item__ready_exsist_password(
  struct_ready_connect_password projectee
);

#define __Const_H_DEFINED
#endif
