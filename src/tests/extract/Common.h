/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: krml -verbose -warn-error +9 -drop WasmSupport -drop C_Endianness -drop C -tmpdir ../out -fsopt --cache_dir -fsopt ../out -no-prefix Main -no-prefix Utils -no-prefix Const -no-prefix Common -no-prefix Publish -no-prefix Connect -no-prefix Disconnect -no-prefix FFI -no-prefix Debug -no-prefix Debug_FFI -o ../mqttPacketParser.out main.fst common.fst const.fst publish.fst connect.fst disconnect.fst ffi.fst debug.fst debug_ffi.fst ffi.c debug_ffi.c callMain.c
  F* version: ad3db6d3
  KreMLin version: 2f843633
 */

#include "kremlib.h"
#ifndef __Common_H
#define __Common_H

#include "Const.h"


uint8_t most_significant_four_bit_to_zero(uint8_t i);

uint32_t decodeing_variable_bytes(uint8_t *ptr_for_decoding_packets, uint8_t bytes_length);

struct_variable_length
get_variable_byte(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t now_index,
  bool compare_packet_size
);

uint8_t get_message_type(uint8_t message_type_bits);

struct_fixed_header_constant
get_struct_fixed_header_constant_except_publish(uint8_t message_type);

struct_fixed_header error_struct_fixed_header(struct_error_struct error_struct);

uint8_t slice_byte(uint8_t byte, uint8_t a, uint8_t b);

uint8_t get_dup_flag(uint8_t fixed_header_first_one_byte);

uint8_t get_qos_flag(uint8_t fixed_header_first_one_byte);

uint8_t get_retain_flag(uint8_t fixed_header_first_one_byte);

uint8_t get_flag(uint8_t message_type, uint8_t fixed_header_first_one_byte);

struct_share_common_data_check
share_common_data_check(uint8_t *packet_data, uint32_t packet_size);

uint8_t get_property_type_id(uint8_t property_id);

uint16_t get_two_byte_integer_u8_to_u16(uint8_t msb_u8, uint8_t lsb_u8);

uint32_t
get_four_byte_integer(uint8_t mmsb_u8, uint8_t msb_u8, uint8_t lsb_u8, uint8_t llsb_u8);

struct_payload
get_payload(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t payload_start_index,
  uint32_t payload_end_index
);

struct_property_type
parse_property_two_byte_integer(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t property_value_start_index
);

struct_property_type
parse_property_four_byte_integer(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t property_value_start_index
);

struct_property_type
parse_property_one_byte_integer(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t property_value_start_index
);

struct_property_type
parse_property_variable_byte_integer(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t property_value_start_index
);

struct_binary_data
get_binary(uint8_t *packet_data, uint32_t packet_size, uint32_t binary_start_index);

struct_property_type
parse_property_binary(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t property_value_start_index
);

struct_is_valid_utf8_ready
is_valid_utf8_ready(uint8_t *packet_data, uint32_t packet_size, uint32_t i);

bool
is_valid_utf8(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t utf8_encoded_string_entity_start_index,
  uint32_t utf8_encoded_string_entity_end_index,
  uint32_t utf8_encoded_string_end_index
);

struct_utf8_string
is_valid_utf8_encoded_string(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t utf8_encoded_string_start_index,
  uint16_t utf8_encoded_string_length
);

struct_utf8_string
get_utf8_encoded_string(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t utf8_encoded_string_start_index
);

struct_property_type
parse_property_utf8_encoded_string(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t property_value_start_index
);

struct_utf8_string_pair
get_utf8_encoded_string_pair(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t utf8_encoded_string_pair_start_index
);

struct_property_type
parse_property_utf8_encoded_string_pair(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t property_value_start_index
);

struct_property_type
get_property_type_struct(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint8_t property_type_id,
  uint32_t property_value_start_index
);

struct_property
parse_property(uint8_t *packet_data, uint32_t packet_size, uint32_t property_start_index);

#define __Common_H_DEFINED
#endif
