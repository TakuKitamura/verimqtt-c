/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: krml -verbose -warn-error +9 -drop WasmSupport -drop C_Endianness -drop C -tmpdir ../out -fsopt --cache_dir -fsopt ../out -no-prefix Main -no-prefix Utils -no-prefix Const -no-prefix Common -no-prefix Publish -no-prefix Connect -no-prefix Disconnect -no-prefix FFI -no-prefix Debug -no-prefix Debug_FFI -o ../mqttPacketParser.out main.fst common.fst const.fst publish.fst connect.fst disconnect.fst ffi.fst debug.fst debug_ffi.fst ffi.c debug_ffi.c callMain.c
  F* version: ad3db6d3
  KreMLin version: 2f843633
 */

#include "kremlib.h"
#ifndef __Connect_H
#define __Connect_H

#include "Const.h"
#include "Common.h"


struct_fixed_header assemble_connect_struct(struct_connect_parts s);

struct_protocol_name
is_valid_protocol_name(uint8_t *packet_data, uint32_t packet_size, uint32_t next_start_index);

struct_protocol_version
is_valid_protocol_version(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t next_start_index
);

struct_connect_flag
get_connect_flag(uint8_t *packet_data, uint32_t packet_size, uint32_t next_start_index);

struct_protocol_version
get_protocol_version_struct(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t protocol_version_start_index
);

struct_connect_flag
get_connect_flag_struct(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t connect_flag_start_index
);

uint32_t get_connect_property_index(uint32_t keep_alive_start_index, uint32_t packet_size);

struct_utf8_string
get_connect_id(uint8_t *packet_data, uint32_t packet_size, uint32_t payload_start_index);

struct_connect_will
get_connect_will_struct(uint8_t *packet_data, uint32_t packet_size, uint32_t will_start_index);

struct_keep_alive
get_keep_alive(uint8_t *packet_data, uint32_t packet_size, uint32_t keep_alive_start_index);

struct_utf8_string
get_connect_user_name_struct(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t user_name_start_index
);

struct_binary_data
get_connect_password_struct(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint32_t password_start_index
);

struct_ready_connect_will
get_connect_will(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint8_t will_flag,
  uint32_t payload_start_index,
  uint16_t connect_id_length
);

struct_ready_connect_user_name
get_connect_user_name(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint8_t user_name_flag,
  uint32_t user_name_start_index
);

struct_ready_connect_password
get_connect_password(
  uint8_t *packet_data,
  uint32_t packet_size,
  uint8_t password_flag,
  uint32_t user_name_start_index
);

struct_connect_packet_seed
connect_packet_parser(uint8_t *packet_data, uint32_t packet_size, uint32_t next_start_index);

struct_fixed_header connect_packet_parse_result(struct_share_common_data share_common_data);

#define __Connect_H_DEFINED
#endif
